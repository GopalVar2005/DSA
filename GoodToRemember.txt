GoodToRemember->

1. 
Character.isLetterOrDigit(ch)
   Character.isDigit(ch)
   ...

2.
public boolean isVowel(char ch)
    {
        ch=Character.toLowerCase(ch);
        return ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u';
    }

3.
for (Map.Entry<Integer, List<Integer>> entry : adj.entrySet()) 
        {
            System.out.print(entry.getKey() + " -> ");
            for (int neighbor : entry.getValue()) 
            {
                System.out.print(neighbor + ", ");
            }
            System.out.println();
        }

4.
String key = "the quick brown fox";
key = key.replace(" ", ""); // Remove spaces
char[] chars = key.toCharArray(); // Convert to character array

5.
sb.setCharAt(indices[i],s.charAt(i));

6.
ArrayList<String> list = new ArrayList<>(Arrays.asList(arr));

7.
StringBuilder sb = new StringBuilder("Old Content");
sb.replace(0, sb.length(), "New Content"(only string));

System.out.println(sb); // Output: "New Content"

8.
instead of
res.trim();
use
String.join(" ", ans); 

9.(same for map)
Set<Integer> hash = new HashSet<>();
hash.add(3);
hash.add(1);
hash.add(2);
System.out.println(hash); 
// Could print [1, 2, 3] or [2, 3, 1] or any order—no guarantees.

Set<Integer> linked = new LinkedHashSet<>();
linked.add(3);
linked.add(1);
linked.add(2);
System.out.println(linked); 
// Always prints [3, 1, 2] — exactly the order you added them.

Set<Integer> tree = new TreeSet<>();
tree.add(3);
tree.add(1);
tree.add(2);
System.out.println(tree); 
// Always prints [1, 2, 3] — sorted ascending.

TreeSet<Integer> descSet = new TreeSet<>(Collections.reverseOrder());
descSet.add(3);
descSet.add(1);
descSet.add(2);

System.out.println(descSet);  // prints [3, 2, 1]


10. 
 if (!map.containsKey(key)) {
            map.put(key, value);
        }

        // Or shorter: putIfAbsent (Java 8+)
        map.putIfAbsent("banana", 20);

11.
List<String> list = new ArrayList<>();
list.add("Apple");
list.add("Banana");
list.add("Cherry");

list.add(1, "Orange");  // Insert "Orange" at index 1

System.out.println(list);
