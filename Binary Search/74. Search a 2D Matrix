Problem Statement:  You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Appr1: Binary search on particular row
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0;i<matrix.length;i++)
        {
            if(matrix[i][0]<=target && target<=matrix[i][matrix[0].length-1])
            {
                boolean ans=check(matrix[i], target);
                if(ans)
                {
                    return true;
                }
            }
        }
        return false;
    }
    public boolean check(int[] nums, int target)
    {
        int lo=0;
        int hi=nums.length-1;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            if(nums[mid]==target)
            {
                return true;
            }
            else if(nums[mid]<target)
            {
                lo=mid+1;
            }
            else
            {
                hi=mid-1;
            }
        }
        return false;
    }
}
TC-O(m*logn)
SC-(1)

Appr2: use bs on whole matrix
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
        int lo=0;
        int hi=m*n-1;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            int i=mid/n;
            int j=mid%n;
            if(matrix[i][j]==target)
            {
                return true;
            }
            else if(matrix[i][j]<target)
            {
                lo=mid+1;
            }
            else
            {
                hi=mid-1;
            }
        }
        return false;
    }
}
TC-O(log(m*n))
SC-O(1)
