Problem Statement:  A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

Appr: Agr hm left-right dono se bde ha to peak h, bas left se bde ha to left increasing ma ha yaani peak right ma hoga vrna left m hoga
Edge Cases:  n==0, n==n-1, agr reverse of peak ho to

    public int findPeakElement(int[] nums) {
        int n=nums.length;
        if(n==1)
        {
            return 0;
        }
        if(nums[0]>nums[1])
        {
            return 0;
        }
        if(nums[n-1]>nums[n-2])
        {
            return n-1;
        }
        int lo=1;
        int hi=nums.length-2;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1])
            {
                return mid;
            }
            else if(nums[mid]>nums[mid-1])
            {
                lo=mid+1;
            }
            else
            {
                hi=mid-1;
            }
        }
        return -1;
    }
}
TC-O(logN)
SC-O(1)
