Problem Statement:  Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

class Solution {
    public int splitArray(int[] nums, int k) {
        int lo=max(nums);
        int hi=sum(nums);
        int ans=0;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            if(isPossible(nums, mid, k))
            {
                ans=mid;
                hi=mid-1;
            }
            else
            {
                lo=mid+1;
            }
        }
        return ans;
    }
    public boolean isPossible(int[] nums, int mid, int k)
    {
        int part=1;
        int sum=0;
        for(int i=0;i<nums.length;)
        {
            if(sum+nums[i]<=mid)
            {
                sum+=nums[i];
                i++;
            }
            else
            {
                part++;
                sum=0;
            }
            if(part>k)
            {
                return false;
            }
        }
        return true;
    }
    public int max(int[] nums)
    {
        int max=Integer.MIN_VALUE;
        for(int num:nums)
        {
            max=Math.max(max, num);
        }
        return max;
    }
    public int sum(int[] nums)
    {
        int sum=0;
        for(int num:nums)
        {
            sum+=num;
        }
        return sum;
    }
}
TC-O(n*log(sum))
SC-O(1)
