Problem Statement:  You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1

Appr:  we have to check only adjacent flowers not all so use kadanes/greedy if yes then gon forward else restart

        if(m*k>bloomDay.length)
        {
            return -1;
        }
        int lo=min(bloomDay, true);
        int hi=min(bloomDay, false);
        int ans=-1;
        while(lo<=hi)
        {
            int mid=lo+(hi-lo)/2;
            if(isPossible(mid, bloomDay, m, k))
            {
                ans=mid;
                hi=mid-1;
            }
            else
            {
                lo=mid+1;
            }
        }
        return ans;
    }
    public boolean isPossible(int mid, int[] nums, int m, int k)
    {
        int flowers=0, count=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]<=mid)
            {
                flowers++;
            }
            else
            {
                flowers=0;
            }
            if(flowers==k)
            {
                count++;
                flowers=0;
            }
        }
        return count>=m;
    }
    public int min(int[] nums, boolean Min)
    {
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int num:nums)
        {
            min=Math.min(min, num);
            max=Math.max(max, num);
        }
        if(Min)
        {
            return min;
        }
        return max;
    }
TC = O(n Â· log(maxDay - minDay))
SC = O(1)
