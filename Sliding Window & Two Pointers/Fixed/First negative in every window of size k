Problem Statement:  Given an array arr[]  and a positive integer k, find the first negative integer for each and every window(contiguous subarray) of size k.
Note: If a window does not contain a negative integer, then return 0 for that window.

class Solution {
    static List<Integer> firstNegInt(int arr[], int k) {
        // write code here
        List<Integer> ans=new ArrayList<>();
        Deque<Integer> q=new ArrayDeque<>();
        int i=0, j=0;
        while(j<arr.length)
        {
            if(arr[j]<0)
            {
                q.addLast(j);
            }
            if(j-i+1<k)
            {
                j++;
            }
            else
            {
                if(!q.isEmpty())
                {
                    ans.add(arr[q.peekFirst()]);
                }
                else
                {
                    ans.add(0);
                }  
                i++;
                while(!q.isEmpty() && q.peekFirst()<i)
                {
                    q.pollFirst();
                }
                j++;
            }
        }
        return ans;
    }
}
TC-O(N)
SC-O(K)
