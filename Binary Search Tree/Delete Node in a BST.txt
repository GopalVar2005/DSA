Problem Statement: Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.

Appr: phle vo node dundo jisko delete krna ha phir agr 0 child ha to null bhjdo, 1 child ha to usse bhjdo , 2 hai to phle uska replacement dundo(left ka max ya right ka min) usko lgake original se dlt krdo

    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null)
        {
            return null;
        }
        if(root.val<key)
        {
            root.right=deleteNode(root.right, key);
        }
        else if(root.val>key)
        {
            root.left=deleteNode(root.left, key);
        }
        else
        {
            // 1 
            if(root.left==null)
            {
                return root.right;
            }
            else if(root.right==null)
            {
                return root.left;
            }
            else
            {
                TreeNode maxNode=max(root.left);
                root.left=deleteNode(root.left, maxNode.val);
                root.val=maxNode.val;
            }
        }
        return root;
    }
    public TreeNode max(TreeNode root)
    {
        while(root.right!=null)
        {
            root=root.right;
        }
        return root;
    }

Time Complexity: O(h) = O(log n) (balanced) or O(n) (skewed)
Space Complexity: O(h) = O(log n) (balanced) or O(n) (skewed)
