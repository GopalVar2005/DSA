Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Appr:simply agr cur node ans ha to return, dono numbers left ma h to left jao vrna right kyuki hum uppr se strategically chl rhe h jo phla p ya q ke equal hoga vhi ans hoga
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null)
        {
            return null;
        }
        if(p.val<root.val && root.val<q.val)
        {
            return root;
        }
        if(q.val<root.val && root.val<p.val)
        {
            return root;
        }
        TreeNode left=null, right=null;
        if(root.val==p.val || root.val==q.val)
        {
            return root;
        }
        else if(p.val<root.val && q.val<root.val)
        {
            left=lowestCommonAncestor(root.left, p, q);
        }
        else if(p.val>root.val && q.val>root.val)
        {
            right=lowestCommonAncestor(root.right, p, q);
        }
        if(left!=null)
        {
            return left;
        }
        return right;
    }

TC-O(N)
SC-O(N)
