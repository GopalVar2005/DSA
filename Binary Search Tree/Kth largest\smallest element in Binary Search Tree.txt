Problem Statement: Given a Binary Search Tree and an integer ‘K’. Find and return the ‘K-th’ smallest and ‘K-th’ largest element in the given Binary Search Tree.

Appr1: use bst inorder to find the sorted list and then take the element by need
TC-O(N)
SC-O(N)

Appr2: using a global counter(to avoid pass by value issue) to manage the smallest/largest number 
    public int kthSmallest(TreeNode root, int k) {
        count=k;
        return small(root);
    }
    int count=0;
    public int small(TreeNode root)
    {
        if(root==null)
        {
            return -1;
        }
        int left=small(root.left);
        count--;
        if(count==0)
        {
            return root.val;
        }
        int right=small(root.right);
        if(left!=-1)
        {
            return left;
        }
        if(right!=-1)
        {
            return right;
        }
        return -1;
    }

TC-O(N)
SC-O(h)
