Problem Statement: Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Appr:
root to shi ak hi hai, left aur right ko compare kro
    public boolean isSymmetric(TreeNode root) {
        return check(root.left,root.right);
    }
    public boolean check(TreeNode p, TreeNode q)
    {
        if(p==null && q==null)
        {
            return true;
        }
        else if(p==null || q==null)
        {
            return false;
        }
        else if(p.val!=q.val)
        {
            return false;
        }
        boolean left=check(p.left,q.right);
        boolean right=check(p.right,q.left);
        return left && right;
    }

Time Complexity	O(N)	Visit each node once
Space Complexity	O(H)	Recursion stack depth proportional to tree height
