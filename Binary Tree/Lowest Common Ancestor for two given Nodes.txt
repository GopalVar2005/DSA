Problem Statement: Given a binary tree, Find the Lowest Common Ancestor for two given Nodes (x,y).

Appr:
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null)
        {
            return null;
        }
        if(root==p || root==q)
        {
            return root;
        }
        TreeNode left=lowestCommonAncestor(root.left, p, q);
        TreeNode right=lowestCommonAncestor(root.right, p, q);
        if(left==null && right==null) // yha na p ha na q
        {
            return null;
        }
        else if(left!=null && right!=null) // p and q left-right ma ha
        {
            return root;
        }
        else if(left!=null) // dono left ma h 
        {
            return left;
        }
        else // dono right m ha
        {
            return right;
        }
    }
Time Complexity: 
O(N)

Space Complexity:  
O(H) (Balanced → O(log N), Skewed → O(N))
